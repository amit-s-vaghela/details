----------------------------------------------------------------
install composer 
----------------------------------------------------------------
https://linuxhint.com/install-and-use-php-composer-ubuntu-22-04/

  user@desk-1:~$ sudo apt update
  user@desk-1:~$ sudo apt install php-cli unzip
  user@desk-1:~$ curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
  user@desk-1:~$ HASH=`curl -sS https://composer.github.io/installer.sig`
  user@desk-1:~$ sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
  user@desk-1:~$ composer

-----------------------------------------------------------------
Here are the commands to setup magento2 in local using docker:

composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition magento --ignore-platform-reqs
cd magento
docker run -v $(pwd):/app -it --rm composer require --no-update --dev magento/ece-tools magento/magento-cloud-docker --ignore-platform-reqs
docker run -v $(pwd):/app -it --rm composer update --ignore-platform-reqs
### wget https://github.com/magento/magento-cloud-docker/releases/download/1.3.5/init-docker.sh
### copy init-docker.sh from our local
chmod +x init-docker.sh
./init-docker.sh -p 8.2 -i 1.3.5
=> create .magento.docker.yml manualy
content
---------------------------------------------------------------------------------------------------------
name: magento
	system:
	    mode: 'production'
	services:
	    php:
	        version: '8.2'
	        extensions:
	            enabled:
	                - xsl
	                - json
	                - redis
	    mysql:
	        version: '10.6'
	        image: 'mariadb'
	    redis:
	        version: '7.0'
	        image: 'redis'
	    opensearch:
	        version: '2.4'
	        image: 'magento/magento-cloud-docker-opensearch'
	hooks:
	    build: |
	        set -e
	        php ./vendor/bin/ece-tools run scenario/build/generate.xml
	        php ./vendor/bin/ece-tools run scenario/build/transfer.xml
	    deploy: 'php ./vendor/bin/ece-tools run scenario/deploy.xml'
	    post_deploy: 'php ./vendor/bin/ece-tools run scenario/post-deploy.xml'
	mounts:
	    var:
	        path: 'var'
	    app-etc:
	        path: 'app/etc'
	    pub-media:
	        path: 'pub/media'
	    pub-static:
	        path: 'pub/static'
---------------------------------------------------------------------------------------------------------
docker run -v $(pwd):/app -it --rm composer bash
Notes for following command: 
- sync-engine should be "native" for ubuntu, and "mutagen" for mac
- host should be unique, if you already have another project running at magento2.docker, then choose something else, but it should end with .docker
==> ./vendor/bin/ece-docker build:compose --mode="developer" --sync-engine="native" --host=magento2.docker
==> exit
docker-compose up -d
bash ./mutagen.sh (only on mac)
docker-compose run --rm deploy php ./vendor/bin/ece-patches apply
docker-compose run --rm deploy cloud-deploy

If you face an error, then try to uninstall and run cloud-deploy again
	docker-compose run --rm deploy magento-command setup:uninstall
	docker-compose run --rm deploy cloud-deploy

docker-compose run --rm deploy magento-command config:set system/full_page_cache/caching_application 2 --lock-env
docker-compose run --rm deploy magento-command setup:config:set --http-cache-hosts=varnish
docker-compose run --rm deploy magento-command cache:clean
docker-compose run --rm deploy magento-command module:disable Magento_TwoFactorAuth Magento_AdminAdobeImsTwoFactorAuth
